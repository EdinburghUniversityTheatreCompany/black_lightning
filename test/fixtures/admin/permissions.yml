# == Schema Information
#
# Table name: admin_permissions
#
# *id*::            <tt>integer, not null, primary key</tt>
# *name*::          <tt>string(255)</tt>
# *description*::   <tt>string(255)</tt>
# *action*::        <tt>string(255)</tt>
# *subject_class*:: <tt>string(255)</tt>
# *created_at*::    <tt>datetime, not null</tt>
# *updated_at*::    <tt>datetime, not null</tt>
#--
# == Schema Information End
#++

# Automatically given to members and committee for convenience.
access_backend:
  id: 1
  action: access
  subject_class: backend

# For testing the automatic dis-approving in the opportunity
update_opportunities:
  id: 3
  action: update
  subject_class: Opportunity

show_staffing:
  id: 4
  action: show
  subject_class: Admin::Staffing

# To test if the Role show page displays the correct message when not having the permission to create membership activation tokens.
read_roles:
  id: 5
  action: show
  subject_class: Role

# To test if the Role show page displays the correct message when not having the permission to create membership activation tokens.
assign_roles:
  id: 6
  action: assign_roles
  subject_class: User

can_sign_up_for_staffing:
  id: 7
  action: sign_up_for
  subject_class: Admin::StaffingJob

# To test if only people who can manage can see certain fields.
can_show_marketing_creative_profiles:
  id: 8
  action: show
  subject_class: MarketingCreatives::Profile

can_read_complaint:
  id: 9
  action: read
  subject_class: Complaint

can_update_complaint:
  id: 10
  action: update
  subject_class: Complaint

can_index_techies:
  id: 11
  action: index
  subject_class: Techie
  
can_read_users:
  id: 12
  action: read
  subject_class: User