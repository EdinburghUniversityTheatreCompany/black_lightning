# Name of your application. Used to uniquely configure containers.
service: blacklightning

# Name of the container image.
image: bedlamtheatre/blacklightning

# Deploy to these servers.
servers:
  web:
    - bdlm-eusa-ed-ac-uk
  cron:
    hosts:
      - bdlm-eusa-ed-ac-uk
    cmd: bash -c "cat config/crontab | crontab - && cron -f"
    options:
      no-healthcheck: true
      user: root

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: bedlamtheatre.co.uk

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: bedlamtheatre

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure the image builder.
builder:
  arch: amd64
  # cache:
  #   type: registry
  #   image: bedlamtheatre/blacklightning-build-cache
  #   options: mode=max
  # WARNING: IF YOU ENABLE THIS, IT WILL NOT BE PRIVATE AND THAT IS PROBABLY BAD FOR CREDENTIALS SECURITY REASONS

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    RAILS_ENV: production
    DATABASE_USERNAME: root
    DATABASE_HOST: blacklightning-mysql
    SOLID_QUEUE_IN_PUMA: true
  secret:
    - RAILS_MASTER_KEY
    - MYSQL_ROOT_PASSWORD

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal app logs -r job" will tail logs from the first server in the job section.
#
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Use a different ssh user than root
#
ssh:
  user: deploy

# Use a persistent storage volume.
volumes:
  - "app_storage:/rails/storage"
  - "app_uploads:/rails/uploads"
  - "app_logs:/rails/log"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets
# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

logging:
  options:
    max-size: 200M

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  mysql:
    image: mysql:8.0
    host: bdlm-eusa-ed-ac-uk
    env:
      clear:
        MYSQL_ROOT_HOST: "%"
      secret:
        - MYSQL_ROOT_PASSWORD
    directories:
      - data:/var/lib/mysql
#   redis:
#     image: valkey/valkey:8
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
